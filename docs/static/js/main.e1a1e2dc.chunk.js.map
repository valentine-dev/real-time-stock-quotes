{"version":3,"sources":["display.js","input.js","index.js"],"names":["Display","data","this","props","Table","striped","bordered","hover","responsive","size","rows","Component","DisplayHeader","class","DisplayBody","map","row","index","dateStr","Date","regularMarketTime","raw","toLocaleDateString","month","day","timeStr","toLocaleTimeString","hour12","changePercent","regularMarketChangePercent","fmt","change","regularMarketChange","textColor","colonIndex","symbol","indexOf","price","regularMarketPrice","volume","regularMarketVolume","symColor","slice","toLowerCase","symbolString","currency","key","GetQuote","getQuote","state","startsWith","axios","get","then","res","quotes","quoteResponse","result","length","message","longName","fullExchangeName","setState","handleSubmit","catch","err","response","includes","status","name","handleInputChange","event","target","value","trim","errorMessage","disableGet","undefined","displayError","displayMessage","Container","Alert","variant","Form","autoComplete","onSubmit","e","preventDefault","Group","as","Row","Col","xs","Control","type","autoCorrect","autoCapitalize","onChange","placeholder","Button","onClick","disabled","require","config","App","quote","latestQuotes","Navbar","bg","sticky","expand","Brand","href","role","aria-label","Toggle","aria-controls","Collapse","id","Nav","className","Link","title","token","process","Notes","useState","show","setShow","dismissible","onClose","Heading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1a1e2dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass Display extends Component {\r\n   render() {\r\n      const { data } = this.props;\r\n      return (\r\n         <Table striped bordered hover responsive=\"sm\" size=\"sm\">\r\n            <DisplayHeader />\r\n            <DisplayBody rows={data} />\r\n         </Table>\r\n      )\r\n   }\r\n}\r\n\r\nconst DisplayHeader = () => {\r\n   return (\r\n      <thead>\r\n         <tr class=\"text-right\">\r\n            <th class=\"text-left\">Time</th>\r\n            <th>Symbol</th>\r\n            <th>$ (Volume)</th>\r\n            <th>Change (%)</th>\r\n         </tr>\r\n      </thead>\r\n   )\r\n};\r\n\r\nconst DisplayBody = props => {\r\n   const rows = props.rows.map((row, index) => {\r\n\r\n      const dateOptions = { month: 'numeric', day: 'numeric' };\r\n      const dateStr = new Date(row.regularMarketTime.raw*1000).toLocaleDateString('en-CA', dateOptions);\r\n      const timeOptions = { hour12: false };\r\n      const timeStr = new Date(row.regularMarketTime.raw*1000).toLocaleTimeString('en-CA', timeOptions);\r\n      const changePercent = row.regularMarketChangePercent.fmt;\r\n      const change = row.regularMarketChange.fmt;\r\n      const textColor = row.regularMarketChange.raw === 0 ? \"text-dark\"\r\n         : (row.regularMarketChange.raw > 0 ? \"text-success\" : \"text-danger\");\r\n      const colonIndex = row.symbol.indexOf('.');\r\n      const price = row.regularMarketPrice.fmt;\r\n      const volume = row.regularMarketVolume.fmt;\r\n\r\n      const symColor = colonIndex > -1 ? \r\n         (row.symbol.slice(colonIndex+1).toLowerCase() === 'to' ? \"text-primary\" \r\n         : (row.symbol.slice(colonIndex+1).toLowerCase() === 'cn' ? \"text-light\" : \"text-dark\"))\r\n         : \"text-success\";\r\n\r\n      const symbolString = colonIndex > -1 ? row.symbol.slice(0,colonIndex) : row.symbol;\r\n      const currency = row.currency;\r\n      return (\r\n\r\n         <tr key={index} class=\"text-right\">\r\n            <td class=\"text-left\">{dateStr} {timeStr}</td>\r\n            <td class={symColor}>{symbolString}</td>\r\n            <td>{currency}<span class=\"font-weight-bold\">{price}</span> ({volume})</td>\r\n            <td class={textColor}>{change} ({changePercent})</td>\r\n         </tr >\r\n      )\r\n   });\r\n\r\n   return <tbody>{rows}</tbody>\r\n};\r\n\r\n\r\n\r\nexport default Display;\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport axios from 'axios';\r\n\r\nclass GetQuote extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = { symbol: null, errorMessage: null, message: null}\r\n   }\r\n\r\n   getQuote = () => {\r\n      const symbol = this.state.symbol.toLowerCase().startsWith(\"t.\") ? this.state.symbol.slice(2) + \".to\"\r\n         : (this.state.symbol.toLowerCase().startsWith(\"c.\") ? this.state.symbol.slice(2) + \".cn\" \r\n         : (this.state.symbol.toLowerCase().startsWith(\"v.\") ? this.state.symbol.slice(2) + \".v\" : this.state.symbol));\r\n      axios.get('https://cors-anywhere.herokuapp.com/https://query1.finance.yahoo.com/v7/finance/quote?formatted=true&symbols=' + symbol)\r\n         .then(res => {\r\n            //console.log(res);\r\n            const quotes = res.data.quoteResponse.result;\r\n            //console.log(quote);\r\n            if (quotes && quotes.length >  0) {\r\n               //console.log(\"Got last price ... \");\r\n               const message = quotes[0].longName + ' on ' + quotes[0].fullExchangeName;\r\n               this.setState({ ...this.state, \"errorMessage\": null, 'message': message });\r\n               this.props.handleSubmit(quotes[0]);\r\n            } else {\r\n               this.setState({ ...this.state, \"errorMessage\": \"There is no data for this symbol.\" });\r\n            }\r\n         })\r\n         .catch(err => {\r\n            //console.log(err);\r\n            if (err.response) {\r\n               // The request was made and the server responded with a status code\r\n               // that falls out of the range of 2xx\r\n               //console.log(err.response.data);\r\n               //console.log(err.response.status);\r\n               //console.log(err.response.headers);\r\n               let message;\r\n               if (typeof err.response.data === 'string') {\r\n                  message = err.response.data.includes('Cannot GET /quote') ? 'The API backend is not available. Please have a check.' : 'HTTP ' + err.response.status + ': ' + err.response.data;\r\n               } else if (typeof err.response.data === 'object') {\r\n                  message = err.response.data.name + \": \" + err.response.data.message;\r\n               } else {\r\n                  message = \"Oops, something went wrong!\";\r\n               }\r\n               this.setState({ ...this.state, \"errorMessage\": message });\r\n            } else {\r\n               this.setState({ ...this.state, \"errorMessage\": \"Oops, something went wrong!\" });\r\n            }\r\n\r\n         });\r\n   }\r\n\r\n   handleInputChange = (event) => {\r\n      this.setState({ ...this.state, \"symbol\": event.target.value.trim(), \"errorMessage\": null, \"message\": null });\r\n   }\r\n\r\n   render() {\r\n\r\n      let disableGet = true;\r\n      if (this.state.symbol !== undefined && this.state.symbol !== null && this.state.symbol.length > 0) {\r\n         disableGet = false;\r\n      }\r\n\r\n      const displayError = this.state.errorMessage === null ? false : true;\r\n      const displayMessage = this.state.message === null ? false : true;\r\n      return (\r\n         <Container>\r\n            <Alert variant='info'>\r\n            <Form autoComplete=\"on\" onSubmit={e => e.preventDefault()} >\r\n               <Form.Group as={Row} >\r\n                  <Col xs=\"9\">\r\n                     <Form.Control type=\"text\" autoCorrect=\"off\" autoCapitalize=\"off\" onChange={this.handleInputChange} placeholder=\"a, t.h, c.j, or v.c\" />\r\n                  </Col>\r\n                  {disableGet ? <Col xs=\"2\"><Button onClick={this.getQuote} disabled>GO</Button></Col> \r\n                     : <Col xs=\"2\"><Button onClick={this.getQuote}>GO</Button></Col>\r\n                  }\r\n               </Form.Group>\r\n            </Form>\r\n            </Alert>\r\n            {displayMessage ? <Alert variant='info'>{this.state.message}</Alert> : null}\r\n            {displayError ? <Alert variant='warning'>{this.state.errorMessage}</Alert> : null}\r\n         </Container>\r\n      )\r\n   }\r\n}\r\nexport default GetQuote;\r\n","import React, { useState, Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Display from './display';\r\nimport GetQuote from './input';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nrequire('dotenv').config();\r\n\r\nclass App extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = { latestQuotes: [] }\r\n   }\r\n\r\n   getQuote = quote => {\r\n      this.setState({ latestQuotes: [quote, ...this.state.latestQuotes] });\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <Container>\r\n            <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\" expand=\"sm\">\r\n               <Navbar.Brand href=\"https://enjoyit.ca\">\r\n                  enjoyit.ca <span role=\"img\" aria-label=\"Stock\">&#x1F4C8;</span> 2022\r\n               </Navbar.Brand>\r\n               <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n               <Navbar.Collapse id=\"basic-navbar-nav\">\r\n               <Nav className=\"mr-auto\">\r\n               <Nav.Link href=\"mailto:feedback@enjoyit.ca\" title=\"provide feedback to feedback@enjoyit.ca\">Feedback</Nav.Link>\r\n               <Nav.Link href=\"mailto:donations@enjoyit.ca\" title=\"eTransfer less than $10 to donations@enjoyit.ca\">Donations</Nav.Link>\r\n               </Nav>\r\n               </Navbar.Collapse>\r\n            </Navbar>            \r\n            <Notes />\r\n            <GetQuote handleSubmit={this.getQuote} token={process.env.REACT_APP_TOKEN} />\r\n            {this.state.latestQuotes.length > 0 ? <Display data={this.state.latestQuotes} /> : null}\r\n         </Container>\r\n      );\r\n   }\r\n}\r\n\r\nconst Notes = () => {\r\n   const [show, setShow] = useState(true);\r\n\r\n   if (show) {\r\n      return (\r\n         <Alert variant=\"primary\" dismissible onClose={() => setShow(false)}>\r\n            <Alert.Heading>FREE Real-Time Quotes for North American Stocks</Alert.Heading>\r\n            <p>For non-common stocks, Yahoo! Finance convention is used.</p>\r\n            <p>\r\n               For US exchanges, enter the stock symbol. <br/>\r\n               For Toronto Stock Exchange, prepend <code>t.</code> like <code>t.h</code>. <br/>\r\n               For TSX Venture Exchange, prepend <code>v.</code> like <code>v.c</code>.<br/>\r\n               For Canadian Securities Exchange, prepend <code>c.</code> like <code>c.h</code>.\r\n            </p>\r\n         </Alert>         \r\n      )\r\n   }\r\n   return <></>;\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}