{"version":3,"sources":["display.js","input.js","index.js"],"names":["Display","data","this","props","Table","striped","bordered","hover","responsive","size","rows","Component","DisplayHeader","class","DisplayBody","map","row","index","dateStr","Date","pricedata","lasttradedatetime","toLocaleDateString","month","day","timeStr","toLocaleTimeString","hour12","changePercent","changepercent","toFixed","textColor","change","colonIndex","symbolstring","indexOf","symColor","slice","toLowerCase","symbolString","key","exchange","last","sharevolume","GetQuote","getQuote","axios","get","state","symbol","token","then","res","console","log","quote","message","equityinfo","longname","exLgName","setState","handleSubmit","name","catch","err","response","status","headers","includes","handleInputChange","event","target","value","trim","errorMessage","disableGet","undefined","length","displayError","displayMessage","Container","Form","autoComplete","onSubmit","e","preventDefault","Group","as","Row","Col","xs","Control","type","autocorrect","autocapitalize","onChange","placeholder","Button","onClick","Alert","variant","require","config","App","latestQuotes","Navbar","bg","sticky","expand","Brand","href","Heading","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79d90e38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\n\nclass Display extends Component {\n   render() {\n      const { data } = this.props;\n      return (\n         <Table striped bordered hover responsive=\"sm\" size=\"sm\">\n            <DisplayHeader />\n            <DisplayBody rows={data} />\n         </Table>\n      )\n   }\n}\n\nconst DisplayHeader = () => {\n   return (\n      <thead>\n         <tr class=\"text-right\">\n            <th class=\"text-left\">Time</th>\n            <th>Symbol (Exchange)</th>\n            <th>$ (Volume)</th>\n            <th>Change (%)</th>\n         </tr>\n      </thead>\n   )\n};\n\nconst DisplayBody = props => {\n   const rows = props.rows.map((row, index) => {\n\n      const dateOptions = { month: 'numeric', day: 'numeric' };\n      const dateStr = new Date(row.pricedata.lasttradedatetime).toLocaleDateString('en-CA', dateOptions);\n      const timeOptions = { hour12: false };\n      const timeStr = new Date(row.pricedata.lasttradedatetime).toLocaleTimeString('en-CA', timeOptions);\n      const changePercent = row.pricedata.changepercent.toFixed(2) + \"%\";\n      const textColor = row.pricedata.change === 0 ? \"text-dark\"\n         : (row.pricedata.change > 0 ? \"text-success\" : \"text-danger\");\n      const colonIndex = row.symbolstring.indexOf(':');\n\n      const symColor = colonIndex > -1 ? \n         (row.symbolstring.slice(colonIndex+1).toLowerCase() === 'us' ? \"text-success\" : \"text-secondary\")\n         : \"text-primary\";\n\n      const symbolString = colonIndex > -1 ? row.symbolstring.slice(0,colonIndex) : row.symbolstring;\n\n      return (\n\n         <tr key={index} class=\"text-right\">\n            <td class=\"text-left\">{dateStr} {timeStr}</td>\n            <td class={symColor}>{symbolString} ({row.key.exchange})</td>\n            <td>{row.pricedata.last} ({row.pricedata.sharevolume})</td>\n            <td class={textColor}>{row.pricedata.change} ({changePercent})</td>\n         </tr >\n      )\n   });\n\n   return <tbody>{rows}</tbody>\n};\n\n\n\nexport default Display;","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport axios from 'axios';\n\nclass GetQuote extends Component {\n   constructor(props) {\n      super(props);\n      this.state = { symbol: null, errorMessage: null, message: null }\n   }\n\n   getQuote = () => {\n      axios.get('/quote?symbol=' + this.state.symbol + '&token=' + this.props.token)\n         .then(res => {\n            console.log(res);\n            const quote = res.data;\n            console.log(quote);\n            if (quote && quote.pricedata && quote.pricedata.last) {\n               console.log(\"Got last price ... \");\n               const message = quote.symbolstring + ': ' + quote.equityinfo.longname + ' on ' + quote.key.exLgName;\n               this.setState({ ...this.state, \"errorMessage\": null, 'message': message });\n               this.props.handleSubmit(quote);\n            } else if (quote && quote.name === 'Error') {\n               const message = quote.name + \": \" + quote.message;\n               console.log(message);\n               this.setState({ ...this.state, \"errorMessage\": message });\n            } else {\n               this.setState({ ...this.state, \"errorMessage\": \"Oops, something went wrong!\" });\n            }\n         })\n         .catch(err => {\n            console.log(err);\n            if (err.response) {\n               // The request was made and the server responded with a status code\n               // that falls out of the range of 2xx\n               console.log(err.response.data);\n               console.log(err.response.status);\n               console.log(err.response.headers);\n               let message;\n               if (typeof err.response.data === 'string') {\n                  message = err.response.data.includes('Cannot GET /quote') ? 'The API backend is not available. Please have a check.' : 'HTTP ' + err.response.status + ': ' + err.response.data;\n               } else if (typeof err.response.data === 'object') {\n                  message = err.response.data.name + \": \" + err.response.data.message;\n               } else {\n                  message = \"Oops, something went wrong!\";\n               }\n               this.setState({ ...this.state, \"errorMessage\": message });\n            } else {\n               this.setState({ ...this.state, \"errorMessage\": \"Oops, something went wrong!\" });\n            }\n\n         });\n   }\n\n   handleInputChange = (event) => {\n      this.setState({ ...this.state, \"symbol\": event.target.value.trim(), \"errorMessage\": null, \"message\": null });\n   }\n\n   render() {\n\n      let disableGet = true;\n      if (this.state.symbol !== undefined && this.state.symbol !== null && this.state.symbol.length > 0) {\n         disableGet = false;\n      }\n\n      const displayError = this.state.errorMessage === null ? false : true;\n      const displayMessage = this.state.message === null ? false : true;\n      return (\n         <Container>\n            <Form autoComplete=\"on\" onSubmit={e => e.preventDefault()} >\n               <Form.Group as={Row} >\n                  <Col xs=\"9\">\n                     <Form.Control type=\"text\" autocorrect=\"off\" autocapitalize=\"off\" onChange={this.handleInputChange} placeholder=\"e.g. rba, tqqq:us, or j:cnx\" />\n                  </Col>\n                  {disableGet ? null : <Col xs=\"2\"><Button onClick={this.getQuote}>GO</Button></Col>}\n               </Form.Group>\n            </Form>\n            {displayMessage ? <Alert variant='info'>{this.state.message}</Alert> : null}\n            {displayError ? <Alert variant='warning'>{this.state.errorMessage}</Alert> : null}\n         </Container>\n      )\n   }\n}\nexport default GetQuote;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Display from './display';\nimport GetQuote from './input';\nimport Container from 'react-bootstrap/Container';\nimport Alert from 'react-bootstrap/Alert';\nimport Navbar from 'react-bootstrap/Navbar';\n\nrequire('dotenv').config();\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n      this.state = { latestQuotes: [] }\n   }\n\n   getQuote = quote => {\n      this.setState({ latestQuotes: [quote, ...this.state.latestQuotes] });\n   }\n\n   render() {\n\n      return (\n         <Container>\n            <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\" expand>\n               <Navbar.Brand href=\"#home\">\n                  {'enjoyit.ca - 2020'}\n               </Navbar.Brand>\n            </Navbar>\n            <Alert variant=\"success\">\n               <Alert.Heading>FREE Real-Time Stock Quotes for Companies Listed on TSX</Alert.Heading>\n               <p>\n                  For US exchanges, append \":us\", like <code>tqqq:us</code>\n               </p>\n               <p>\n                  For Canadian Securities Exchange, append \":cnx\", like <code>j:cnx</code>\n               </p>\n            </Alert>\n            <GetQuote handleSubmit={this.getQuote} token={process.env.REACT_APP_TOKEN} />\n            {this.state.latestQuotes.length > 0 ? <Display data={this.state.latestQuotes} /> : null}\n         </Container>\n      );\n   }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}