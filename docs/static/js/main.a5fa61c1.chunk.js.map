{"version":3,"sources":["component/QuoteDisplay/QuoteDisplay.jsx","component/MessageDisplay/MessageDisplay.jsx","component/SymbolExchangeInput/SymbolExchangeInput.jsx","component/SymbolExchangeInputEnabler/SymbolExchangeInputEnabler.jsx","component/Note/Note.jsx","component/StockChart/StockChart.jsx","component/App/App.jsx","index.js"],"names":["DisplayHeader","props","className","style","width","Button","boxShadow","border","background","padding","onClick","handleSubmit","role","aria-label","showDate","handleToggleShowDate","showRange","handleToggleShowRange","showDiff","color","handleToggleShowDiff","DisplayBody","rows","map","row","index","dayLow","regularMarketDayLow","fmt","dayHigh","regularMarketDayHigh","regularPrice","regularMarketPrice","colonIndex","symbol","indexOf","symbolString","slice","currency","toUpperCase","symColor","toLowerCase","exchange","marketTime","regularMarketTime","raw","changePercent","regularMarketChangePercent","formattedChange","regularMarketChange","change","price","marketState","postMarketTime","preMarketTime","preMarketChangePercent","preMarketChange","preMarketPrice","postMarketChangePercent","postMarketChange","postMarketPrice","dateStr","Date","toLocaleDateString","month","day","timeStr","toLocaleTimeString","hour12","textColor","key","refreshChart","refreshQuote","OverlayTrigger","overlay","Tooltip","id","ProgressBar","variant","min","now","max","label","QuoteDisplay","useState","dateShow","setDateShow","rangeShow","setRangeShow","diffShow","setDiffShow","Table","striped","bordered","hover","responsive","size","status","data","MessageDisplay","msg","show","setShow","Toast","delay","autohide","onClose","Body","SymbolExchangeInput","getQuote","handleInputChange","state","handleSymbolUpdate","event","regex","RegExp","target","value","trim","test","setState","handleExchangeUpdate","e","handleSymbolInputKeyDown","date","this","timerID","setInterval","tick","clearInterval","disableGet","undefined","length","Container","Form","autoComplete","onSubmit","preventDefault","Group","as","Row","Col","xs","Control","onChange","placeholder","defaultValue","type","autoCorrect","autoCapitalize","onKeyDown","title","disabled","Component","SymbolExchangeInputEnabler","handleClick","Notes","Alert","dismissible","Heading","StockChart","getTicks","chart","chartArray","range","push","x","days","currentDateTimestamp","includes","at","ticks","getTooltip","y","hour","minute","weekday","quotes","filter","time","quote","Math","round","chartPreviousClose","tickArray","ResponsiveContainer","height","AreaChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tickLine","tickSize","axisLine","fontSize","interval","tickFormatter","timestamp","YAxis","domain","orientation","formatter","name","separator","contentStyle","content","active","payload","backgroundColor","ReferenceLine","stroke","alwaysShow","Label","position","fontWeight","Area","fill","require","config","App","updateMessage","errMsg","handleTabUpdate","getQuoteChart","oldState","updateQuotes","updatedQuotes","latestQuotes","quoteNums","foundMatching","showChart","yahooSymbol","showSymbolExchangeInput","axios","get","process","then","res","result","timeStamps","indicators","close","meta","errorMessage","error","code","description","catch","err","message","response","quoteResponse","longName","fullExchangeName","shortName","symbols","o","join","toggleSymbolExchangeInputShow","handleCloseChart","Navbar","bg","sticky","expand","Brand","href","Badge","Toggle","aria-controls","Collapse","Nav","Link","Note","Modal","onHide","Tabs","activeKey","onSelect","Tab","eventKey","ReactDOM","render","document","getElementById"],"mappings":"mdAiCA,SAASA,EAAcC,GAEpB,OACG,+BACG,wBAAIC,UAAU,cACX,wBAAIA,UAAU,YAAYC,MAAO,CAAEC,MAAO,QACvC,kBAACC,EAAA,EAAD,CAAQF,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBAAMT,EAAMU,aAAa,KAAM,MAAM,KAAQ,0BAAMC,KAAK,MAAMC,aAAW,WAA5B,kBAE/I,wBAAIV,MAAO,CAAEC,MAAO,QAChBH,EAAMa,SAAW,kBAACT,EAAA,EAAD,CAAQF,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBAAMT,EAAMc,qBAAqBd,EAAMa,YAAW,0BAAMF,KAAK,MAAMC,aAAW,QAA5B,iBAA+D,kBAACR,EAAA,EAAD,CAAQF,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBAAMT,EAAMc,qBAAqBd,EAAMa,YAAW,0BAAMF,KAAK,MAAMC,aAAW,QAA5B,YAEtX,wBAAIV,MAAO,CAAEC,MAAO,QAChBH,EAAMe,UAAY,kBAACX,EAAA,EAAD,CAAQF,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBAAMT,EAAMgB,sBAAsBhB,EAAMe,aAAY,0BAAMJ,KAAK,MAAMC,aAAW,SAA5B,iBAAgE,kBAACR,EAAA,EAAD,CAAQF,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBAAMT,EAAMgB,sBAAsBhB,EAAMe,aAAY,0BAAMJ,KAAK,MAAMC,aAAW,SAA5B,kBAE5X,wBAAIV,MAAO,CAAEC,MAAO,QAAUH,EAAMiB,SAAW,kBAACb,EAAA,EAAD,CAAQH,UAAU,cAAcC,MAAO,CAAEI,OAAQ,OAAQC,WAAY,OAAQW,MAAO,QAASV,QAAS,GAAKC,QAAS,kBAAMT,EAAMmB,qBAAqBnB,EAAMiB,YAAW,uCAAiC,kBAACb,EAAA,EAAD,CAAQH,UAAU,cAAcC,MAAO,CAAEI,OAAQ,OAAQC,WAAY,OAAQW,MAAO,QAASV,QAAS,GAAKC,QAAS,kBAAMT,EAAMmB,qBAAqBnB,EAAMiB,YAAW,uCAMxa,SAASG,EAAapB,GAEnB,IASMqB,EAAOrB,EAAMqB,KAAKC,KAAI,SAACC,EAAKC,GAE/B,IAEMC,EAASF,EAAIG,oBAAoBC,IACjCC,EAAUL,EAAIM,qBAAqBF,IACnCG,EAAeP,EAAIQ,mBAAmBJ,IACtCK,EAAaT,EAAIU,OAAOC,QAAQ,KAChCC,EAAeH,GAAc,EAAIT,EAAIU,OAAOG,MAAM,EAAGJ,GAAcT,EAAIU,OACvEI,EAA0C,QAA/Bd,EAAIc,SAASC,cAA0B,KAAO,IACzDC,EAAWP,GAAc,EACwB,OAAnDT,EAAIU,OAAOG,MAAMJ,EAAa,GAAGQ,cAAyB,UACJ,OAAnDjB,EAAIU,OAAOG,MAAMJ,EAAa,GAAGQ,cAAyB,SACJ,MAAnDjB,EAAIU,OAAOG,MAAMJ,EAAa,GAAGQ,cAAwB,OACvD,UAGL,UACDC,EAAWT,GAAc,EACwB,OAAnDT,EAAIU,OAAOG,MAAMJ,EAAa,GAAGQ,cAAyB,MACJ,OAAnDjB,EAAIU,OAAOG,MAAMJ,EAAa,GAAGQ,cAAyB,MACJ,MAAnDjB,EAAIU,OAAOG,MAAMJ,EAAa,GAAGQ,cAAwB,OACvD,MAGL,KAGHE,EAAanB,EAAIoB,kBAAkBC,IACnCC,EAAgBtB,EAAIuB,2BAA2BnB,IAC/CoB,EAAkBxB,EAAIyB,oBAAoBrB,IAC1CsB,EAAS1B,EAAIyB,oBAAoBJ,IACjCM,EAAQ3B,EAAIQ,mBAAmBJ,IACV,SAApBJ,EAAI4B,aAA8C,aAApB5B,EAAI4B,aAAkD,WAApB5B,EAAI4B,cAA6B5B,EAAI6B,eAM3E,QAApB7B,EAAI4B,aAAyB5B,EAAI8B,gBACzCX,EAAanB,EAAI8B,cAAcT,IAC/BC,EAAgBtB,EAAI+B,uBAAuB3B,IAC3CoB,EAAkBxB,EAAIgC,gBAAgB5B,IACtCsB,EAAS1B,EAAIgC,gBAAgBX,IAC7BM,EAAQ3B,EAAIiC,eAAe7B,MAV3Be,EAAanB,EAAI6B,eAAeR,IAChCC,EAAgBtB,EAAIkC,wBAAwB9B,IAC5CoB,EAAkBxB,EAAImC,iBAAiB/B,IACvCsB,EAAS1B,EAAImC,iBAAiBd,IAC9BM,EAAQ3B,EAAIoC,gBAAgBhC,KAS/B,IAAMiC,EAAU,IAAIC,KAAkB,IAAbnB,GAAmBoB,mBAAmB,QA7C3C,CAAEC,MAAO,UAAWC,IAAK,YA8CvCC,EAAU,IAAIJ,KAAkB,IAAbnB,GAAmBwB,mBAAmB,QA7C3C,CAAEC,QAAQ,IA8CxBC,EAAYnB,EAAS,EAAI,eAAkBA,EAAS,EAAI,cAAgB,YAE9E,OAEG,wBAAIoB,IAAK5B,EAAW,IAAMN,EAAclC,UAAU,cAC/C,wBAAIA,UAAU,aACX,kBAACG,EAAA,EAAD,CAAQH,UAAW,QAAUsC,EAAW,oBAAqBrC,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBA5D3I,SAACgC,EAAUR,GAC7BjC,EAAMU,aAAauB,EAAOO,cAAeC,EAASD,eAAe,GAAO,GA2D2F8B,CAAa7B,EAAUN,KAAgB,0BAAMxB,KAAK,MAAMC,aAAW,SAA5B,iBAChM,IAAI,kBAACR,EAAA,EAAD,CAAQH,UAAW,QAAUsC,EAAW,oBAAqBrC,MAAO,CAAEG,UAAW,OAAQC,OAAQ,OAAQC,WAAY,OAAQC,QAAS,GAAKC,QAAS,kBAjEhJ,SAACgC,EAAUR,GAC7BjC,EAAMU,aAAauB,EAAOO,cAAeC,EAASD,eAAe,GAAO,GAgEgG+B,CAAa9B,EAAUN,KAAiBA,IAC1M,4BACInC,EAAMa,SAAW,8BAAO+C,GAAkB,8BAAOK,IAErD,4BACIjE,EAAMe,UACF,kBAACyD,EAAA,EAAD,CAAgBC,QAAS,kBAACC,EAAA,EAAD,CAASC,GAAIlC,EAAW,IAAMN,GAAeV,EAAQ,IAAIG,IACjF,kBAACgD,EAAA,EAAD,CAAaP,IAAK,EAAGQ,QAAStC,EAAUuC,IAAKrD,EAAQsD,IAAKjD,EAAckD,IAAKpD,EAASqD,MAAOnD,KAE9F,8BAAOO,EAAUa,IAEzB,wBAAIjD,UAAWmE,GACXpE,EAAMiB,SAAW,8BAAO8B,GAA0B,8BAAOF,QAMtE,OAAO,+BAAQxB,GAGH6D,MAxIf,SAAuBlF,GAEpB,MAAgCmF,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEA,OACG,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,WAAW,KAAKC,KAAK,MAChD,kBAAChG,EAAD,CACGc,SAAUuE,EACVrE,UAAWuE,EACXrE,SAAUuE,EACV1E,qBAAsB,SAACkF,GAAD,OAAYX,GAAaW,IAC/ChF,sBAAuB,SAACgF,GAAD,OAAYT,GAAcS,IACjD7E,qBAAsB,SAAC6E,GAAD,OAAYP,GAAaO,IAC/CtF,aAAcV,EAAMU,eAEvB,kBAACU,EAAD,CACGC,KAAMrB,EAAMiG,KACZpF,SAAUuE,EACVrE,UAAWuE,EACXrE,SAAUuE,EACV9E,aAAcV,EAAMU,iB,SCbhBwF,EAXO,SAAAlG,GACnB,IAAMmG,EAAMnG,EAAMmG,IAClB,EAAwBhB,oBAAS,GAAjC,mBAAOiB,EAAP,KAAaC,EAAb,KAGA,OACG,kBAACC,EAAA,EAAD,CAAOC,MAAO,IAAMC,UAAQ,EAACJ,KAAMA,EAAMK,QAAS,kBAAMJ,GAAQ,KAAQ,kBAACC,EAAA,EAAMI,KAAP,KAAaP,K,0BCuF7EQ,E,kDAxFZ,WAAY3G,GAAQ,IAAD,8BAChB,cAAMA,IAIT4G,SAAW,WACR,EAAK5G,MAAM6G,kBAAkB,KAAM,aAAe,EAAKC,MAAM7E,OAAOK,cAAgB,OAAS,EAAKwE,MAAMrE,SAASH,cAAgB,2BACjI,EAAKtC,MAAMU,aAAa,EAAKoG,MAAM7E,OAAOO,cAAe,EAAKsE,MAAMrE,SAASD,eAAe,IAP5E,EAUnBuE,mBAAqB,SAACC,GACnB,IAAMC,EAAQ,IAAIC,OAAO,uBACnBjF,EAAS+E,EAAMG,OAAOC,MAAMC,OAC9BJ,EAAMK,KAAKrF,IACZ,EAAKsF,SAAS,CAAE,OAAUtF,IAC1B,EAAKjC,MAAM6G,kBAAkB,KAAM,QAEnC,EAAKU,SAAS,CAAE,OAAU,KAC1B,EAAKvH,MAAM6G,kBAAkB,kBAAmB,QAlBnC,EAsBnBW,qBAAuB,SAAAC,GACpB,EAAKF,SAAS,CAAE,SAAYE,EAAEN,OAAOC,MAAMC,SAC3C,EAAKrH,MAAM6G,kBAAkB,KAAM,OAxBnB,EA2BnBa,yBAA2B,SAACD,GACX,UAAVA,EAAEpD,KACH,EAAKuC,YA3BR,EAAKE,MAAQ,CAAErE,SAAU,MAAOR,OAAQ,GAAI0F,KAAM,IAAI9D,MAFtC,E,qDAiCnB,WAAqB,IAAD,OACjB+D,KAAKC,QAAUC,aACZ,kBAAM,EAAKC,SACX,O,kBAIN,WACGH,KAAKL,SAAS,CACXI,KAAM,IAAI9D,S,kCAIhB,WACGmE,cAAcJ,KAAKC,W,oBAGtB,WAEG,IAAII,GAAa,OACSC,IAAtBN,KAAKd,MAAM7E,QAA8C,OAAtB2F,KAAKd,MAAM7E,QAAmB2F,KAAKd,MAAM7E,OAAOkG,OAAS,IAC7FF,GAAa,GAGhB,IACMhE,EAAU2D,KAAKd,MAAMa,KAAKzD,mBAAmB,QAD/B,CAAEC,QAAQ,IAG9B,OACG,kBAACiE,EAAA,EAAD,CAAWnI,UAAU,aAClB,kBAACoI,EAAA,EAAD,CAAMC,aAAa,KAAKC,SAAU,SAAAd,GAAC,OAAIA,EAAEe,mBACtC,kBAACH,EAAA,EAAKI,MAAN,CAAYC,GAAIC,KACb,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACL,kBAACR,EAAA,EAAKS,QAAN,CAAcJ,GAAG,SAASK,SAAUnB,KAAKJ,qBAAsBwB,YAAY,WAAWC,aAAa,MAAMlD,KAAK,MAC3G,4BAAQqB,MAAM,KAAKnH,UAAU,iCAA7B,MACA,4BAAQmH,MAAM,MAAMnH,UAAU,iCAA9B,OACA,4BAAQmH,MAAM,OAAOnH,UAAU,8BAA/B,QACA,4BAAQmH,MAAM,MAAMnH,UAAU,gCAA9B,OACA,4BAAQmH,MAAM,MAAMnH,UAAU,iCAA9B,SAGN,kBAAC2I,EAAA,EAAD,CAAKC,GAAG,KACL,kBAACR,EAAA,EAAKS,QAAN,CAAcI,KAAK,OAAOC,YAAY,MAAMC,eAAe,MAAMJ,YAAa,UAAY/E,EAAS8B,KAAK,KAAKqB,MAAOQ,KAAKd,MAAM7E,OAC5H8G,SAAUnB,KAAKb,mBACfsC,UAAWzB,KAAKF,4BAErBO,EAAa,kBAACW,EAAA,EAAD,CAAKC,GAAG,KAAI,kBAACzI,EAAA,EAAD,CAAQkJ,MAAM,kCAAkCrJ,UAAU,cAAcC,MAAO,CAAEI,OAAQ,OAAQC,WAAY,QAAUE,QAASmH,KAAKhB,SAAU2C,UAAQ,GAAC,0BAAM5I,KAAK,MAAMC,aAAW,QAA5B,kBAC7K,kBAACgI,EAAA,EAAD,CAAKC,GAAG,KAAI,kBAACzI,EAAA,EAAD,CAAQkJ,MAAM,qBAAqBrJ,UAAU,cAAcC,MAAO,CAAEI,OAAQ,OAAQC,WAAY,QAAUE,QAASmH,KAAKhB,UAAU,0BAAMjG,KAAK,MAAMC,aAAW,QAA5B,yB,GAhFnI4I,aC0CnBC,E,kDA1CZ,WAAYzJ,GAAQ,IAAD,8BAChB,cAAMA,IAIT0J,YAAc,WACX,EAAK1J,MAAMS,WAJX,EAAKqG,MAAQ,CAAEa,KAAM,IAAI9D,MAFT,E,qDASnB,WAAqB,IAAD,OACnB+D,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,kBAIJ,WACEH,KAAKL,SAAS,CACZI,KAAM,IAAI9D,S,kCAId,WACEmE,cAAcJ,KAAKC,W,oBAGpB,WAEG,IACM5D,EAAU2D,KAAKd,MAAMa,KAAKzD,mBAAmB,QAD/B,CAAEC,QAAQ,IAG9B,OACE,kBAACiE,EAAA,EAAD,CAAWnI,UAAU,aACjB,kBAAC0I,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAK3I,UAAU,WAAWgE,GAC1B,kBAAC2E,EAAA,EAAD,CAAK3I,UAAU,cAAa,kBAACG,EAAA,EAAD,CAAQkJ,MAAM,iCAAiCrJ,UAAU,cAAcC,MAAO,CAACI,OAAQ,OAAQC,WAAY,QAASE,QAASmH,KAAK8B,aAAc,0BAAM/I,KAAK,MAAMC,aAAW,OAA5B,wB,GApCnJ4I,aCWzBG,EAdF,WACV,MAAwBxE,oBAAS,GAAjC,mBAAOiB,EAAP,KAAaC,EAAb,KAEA,OAAID,EAEE,kBAACwD,EAAA,EAAD,CAAO/E,QAAQ,UAAUgF,aAAW,EAACpD,QAAS,kBAAMJ,GAAQ,KACzD,kBAACuD,EAAA,EAAME,QAAP,wDACA,qEAA0C,0BAAMnJ,KAAK,MAAMC,aAAW,YAA5B,gBAA1C,IAA2F,0BAAMD,KAAK,MAAMC,aAAW,SAA5B,kBAI7F,sC,gFCuGImJ,E,4MArGXC,SAAW,SAACC,GACR,IAAIC,EAAa,GACjB,GAAoB,OAAhBD,EAAME,MACND,EAAWE,KAAKH,EAAMI,EAAE,GAAK,MAC7BH,EAAWE,KAAKH,EAAMI,EAAE,GAAK,KAAO,MACpCH,EAAWE,KAAKH,EAAMI,EAAE,GAAK,KAAO,OACpCH,EAAWE,KAAKH,EAAMI,EAAE,GAAK,KAAO,YACjC,GAAoB,OAAhBJ,EAAME,MAAgB,CAC7BD,EAAWE,KAAKH,EAAMI,EAAE,IAGxB,IAFA,IAAIC,EAAO,EACPC,EAAuBN,EAAMI,EAAE,GAC5BC,EAAO,IACVC,GAA8C,MAC1CN,EAAMI,EAAEG,SAAUD,KAClBL,EAAWE,KAAKG,GAChBD,OAEAC,EAAuBN,EAAMI,EAAEI,IAAI,YAExC,CACHP,EAAWE,KAAKH,EAAMI,EAAE,IAGxB,IAFA,IAAIK,EAAQ,EACRH,EAAuBN,EAAMI,EAAE,GAC5BK,EAAQ,IACXH,GAA8C,MAC1CN,EAAMI,EAAEG,SAAUD,KAClBL,EAAWE,KAAKG,GAChBG,OAEAH,EAAuBN,EAAMI,EAAEI,IAAI,QAG/C,OAAOP,G,EAGXS,WAAa,SAACN,EAAGO,GACb,MAA+B,OAA3B,EAAK5K,MAAMiK,MAAME,MACV,IAAItG,KAAO,IAAFwG,GAAQnG,mBAAmB,QAAS,CAAEC,QAAQ,EAAO0G,KAAM,UAAWC,OAAQ,YAAe,MAAQF,EACnF,OAA3B,EAAK5K,MAAMiK,MAAME,MACjB,IAAItG,KAAO,IAAFwG,GAAQvG,mBAAmB,QAAS,CAACiH,QAAS,QAAShH,MAAO,QAASC,IAAK,YAAc,KAAO,IAAIH,KAAO,IAAFwG,GAAQnG,mBAAmB,QAAS,CAAEC,QAAQ,EAAO0G,KAAM,UAAWC,OAAQ,YAAe,MAAQF,EAExN,IAAI/G,KAAO,IAAFwG,GAAQvG,mBAAmB,QAAS,CAACC,MAAO,QAASC,IAAK,YAAc,KAAO,IAAIH,KAAO,IAAFwG,GAAQnG,mBAAmB,QAAS,CAAEC,QAAQ,EAAO0G,KAAM,UAAWC,OAAQ,YAAe,MAAQF,G,4CAIrN,WAAU,IAAD,OAECI,EAASpD,KAAK5H,MAAMiK,MAAMW,EAAEK,QAAO,SAAA7D,GAAK,OAAc,OAAVA,KAC7C9F,KAAI,SAAC8F,EAAO5F,GAAR,MAAmB,CACpB0J,KAAM,EAAKlL,MAAMiK,MAAMI,EAAE7I,GACzB2J,MAAOC,KAAKC,MAAc,IAARjE,GAAe,QAGnCkE,EAAqB1D,KAAK5H,MAAMiK,MAAMqB,mBAEtCC,EAAY3D,KAAKoC,SAASpC,KAAK5H,MAAMiK,OAY3C,OACI,kBAACuB,EAAA,EAAD,CAAqBrL,MAAO,OAAQsL,OAAQ,KACxC,kBAACC,EAAA,EAAD,CAAWvL,MAAO,IAAKsL,OAAQ,IAAKxF,KAAM+E,EAAQ/K,UAAU,QACxD,kBAAC0L,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,kBAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOC,UAAU,EAAOC,SAAU,EAAGC,UAAU,EAAOlE,KAAM,CAAEmE,SAAU,UAAYxB,MAAOa,EAAWY,SAAS,mBAC1HC,cAfC,SAAAC,GACb,MAA+B,OAA3B,EAAKrM,MAAMiK,MAAME,MACV,IAAItG,KAAe,IAAVwI,GAAgBnI,mBAAmB,QAAS,CAAEC,QAAQ,EAAO0G,KAAM,UAAWC,OAAQ,YACpE,OAA3B,EAAK9K,MAAMiK,MAAME,MACjB,IAAItG,KAAe,IAAVwI,GAAgBvI,mBAAmB,QAAS,CAACiH,QAAS,UAE/D,IAAIlH,KAAe,IAAVwI,GAAgBvI,mBAAmB,QAAS,CAACC,MAAO,QAASC,IAAK,aAShDkF,KAAK,aACnC,kBAACoD,EAAA,EAAD,CAAOpD,KAAK,SAASqD,OAAQ,CAAC,OAAQ,QAASC,YAAY,QAAQT,UAAU,EAAOC,SAAU,EAAGC,UAAU,EAAOlE,KAAM,CAAEmE,SAAU,YACpI,kBAAC,IAAD,CAASO,UAAW,SAACrF,EAAOsF,EAAM1M,GAAd,MAAwB,CAACoH,EAAO,KAAKuF,UAAW,GAAIC,aAAc,CAAEV,SAAU,UAAYW,QAAS,YAAiC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,QAAS9H,EAAY,EAAZA,MACvI,OAAI6H,GAAUC,GAAWA,EAAQ5E,OAEzB,yBAAKlI,UAAU,iBAAiBC,MAAO,CAAE8M,gBAAiB,OAAQd,SAAU,SAAU1L,QAAS,aAE3F,uBAAGP,UAAU,SAAS,EAAK0K,WAAW1F,EAAO8H,EAAQ,GAAG3F,SAGpD,wCAEpB,kBAAC6F,EAAA,EAAD,CACIrC,EAAGU,EACH4B,OAAO,QACPtB,gBAAgB,MAChBuB,YAAY,GAEZ,kBAACC,EAAA,EAAD,CAAOhG,MAAOkE,EAAoB+B,SAAU,SAAUnB,SAAU,SAAUoB,WAAY,UAG1F,kBAACC,EAAA,EAAD,CAAMrE,KAAK,WAAW4C,QAAQ,QAAQoB,OAAO,UAAUM,KAAMpC,KAAKC,MAAkC,IAA5BzD,KAAK5H,MAAMiK,MAAMW,EAAEH,IAAI,IAAY,IAAMa,EAAqB,QAAU,c,GAhG3I9B,a,OCSzBiE,EAAQ,KAAUC,S,IA6QHC,E,kDAvQZ,WAAY3N,GAAQ,IAAD,8BAChB,cAAMA,IAWT4N,cAAgB,SAACC,EAAQ1H,GACtB,EAAKoB,SAAS,CAAE,aAAgBsG,EAAQ,QAAW1H,KAbnC,EAiBnB2H,gBAAkB,SAACzJ,GAChB,EAAK0J,cAAc,EAAKjH,MAAMmD,MAAMhI,OAAQ,EAAK6E,MAAMmD,MAAMxH,UAAU,GAAO,EAAM4B,GACpF,EAAKkD,UAAU,SAAAyG,GAAQ,MAAK,CAAE/D,MAAM,2BAAM+D,EAAS/D,OAAhB,IAAuBE,MAAO9F,SAnBjD,EAsBnB4J,aAAe,SAAC9C,GAIb,IAHA,IAAI+C,EAAa,YAAO,EAAKpH,MAAMqH,cAC7BC,EAAY,EAAKtH,MAAMqH,aAAahG,OACtCkG,GAAgB,EACX7M,EAAQ,EAAGA,EAAQ4M,EAAW5M,IAAS,CAC7C,IAAID,EAAM2M,EAAc1M,GACxB,GAAID,EAAIU,SAAWkJ,EAAMlJ,OAAQ,CAC9BoM,GAAgB,EAChB9M,EAAI4B,YAAcgI,EAAMhI,YACxB5B,EAAIM,qBAAJ,eAAgCsJ,EAAMtJ,sBACtCN,EAAIG,oBAAJ,eAA+ByJ,EAAMzJ,qBACrCH,EAAIuB,2BAAJ,eAAsCqI,EAAMrI,4BAC5CvB,EAAIyB,oBAAJ,eAA+BmI,EAAMnI,qBACrCzB,EAAIQ,mBAAJ,eAA8BoJ,EAAMpJ,oBACpCR,EAAIoB,kBAAJ,eAA6BwI,EAAMxI,mBACR,SAAtBwI,EAAMhI,aAAgD,aAAtBgI,EAAMhI,aAAoD,WAAtBgI,EAAMhI,cAA6BgI,EAAM/H,eAKjF,QAAtB+H,EAAMhI,aAAyBgI,EAAM9H,gBAC7C9B,EAAIiC,eAAJ,eAA0B2H,EAAM3H,gBAChCjC,EAAI8B,cAAJ,eAAyB8H,EAAM9H,eAC/B9B,EAAI+B,uBAAJ,eAAkC6H,EAAM7H,wBACxC/B,EAAIgC,gBAAJ,eAA2B4H,EAAM5H,mBARjChC,EAAIoC,gBAAJ,eAA2BwH,EAAMxH,iBACjCpC,EAAI6B,eAAJ,eAA0B+H,EAAM/H,gBAChC7B,EAAIkC,wBAAJ,eAAmC0H,EAAM1H,yBACzClC,EAAImC,iBAAJ,eAA4ByH,EAAMzH,mBAOrC,OAID2K,IACFH,EAAa,CAAI/C,GAAJ,mBAAc+C,KAG9B,EAAK3G,SAAS,CAAE4G,aAAcD,KAxDd,EA2DnBH,cAAgB,SAAC9L,EAAQQ,EAAU2D,GAA2C,IAArCkI,EAAoC,wDAAjBnE,EAAiB,uDAAT,KAK3DoE,EAA2B,QAAb9L,EAAqBR,EAAS,MAC/B,QAAbQ,EAAqBR,EAAS,MACd,SAAbQ,EAAsBR,EAAS,KACf,QAAbQ,EAAqBR,EAAS,MAAQA,EAE5CkK,EAAqB,OAAVhC,EAAiB,KAAkB,OAAVA,EAAiB,MAAQ,MAEnE,GAAImE,EACD,EAAK/G,SAAS,CACXiH,wBAAyBpI,EAAMkI,UAAWA,IAG7CG,IAAMC,IAAIC,iGAA2FJ,EACzD,kCAAoCpC,EAAW,uBAAyBhC,GAChHyE,MAAK,SAAAC,GAEH,IAAM3E,EAAa2E,EAAI5I,KAAKgE,MAAM6E,OAElC,GAAI5E,GAAcA,EAAW/B,OAAS,EAAG,CAEtC,IAAM4G,EAAa7E,EAAW,GAAGmC,UAE7B0C,GAAcA,EAAW5G,OAAS,EACnC,EAAKZ,SAAS,CACX0C,MAAO,CAAEE,MAAOA,EAAO1H,SAAUA,EAAUR,OAAQA,EAAQoI,EAAG0E,EAAYnE,EAAGV,EAAW,GAAG8E,WAAW7D,MAAM,GAAG8D,MAAO3D,mBAAoBpB,EAAW,GAAGgF,KAAK5D,oBAC7J6D,aAAc,OAGjB,EAAK5H,SAAS,CAAE0C,MAAO,KAAM,aAAgB,+BAGhD,GAAI4E,EAAI5I,KAAKgE,MAAMmF,MAAO,CACvB,IAAMC,EAAOR,EAAI5I,KAAKgE,MAAMmF,MAAMC,KAC5BC,EAAcT,EAAI5I,KAAKgE,MAAMmF,MAAME,YACzC,EAAK/H,SAAS,CAAE0C,MAAO,KAAM,aAAgBoF,EAAO,KAAOC,SAE3D,EAAK/H,SAAS,CAAE0C,MAAO,KAAM,aAAgB,6BAIrDsF,OAAM,SAAAC,GAEJ,IAAIC,EACAD,EAAIE,UAAYF,EAAIE,SAASzJ,MAE3BwJ,EAD8B,kBAAtBD,EAAIE,SAASzJ,KACXuJ,EAAIE,SAASzJ,KAAKuE,SAAS,qBAAuB,yDAA2D,QAAUgF,EAAIE,SAAS1J,OAAS,KAAOwJ,EAAIE,SAASzJ,KAEjKuJ,EAAIE,SAASzJ,KAAKyG,KAAO,KAAO8C,EAAIE,SAASzJ,KAAKwJ,QAE/D,EAAKlI,SAAS,CAAE0C,MAAO,KAAM,aAAgBwF,MAE7CA,EAAUD,EAAI9C,KAAO,KAAO8C,EAAIH,KAAO,MAAQG,EAAIC,QACnD,EAAKlI,SAAS,CAAE0C,MAAO,KAAM,aAAgBwF,aAKtD,GADA,EAAKlI,SAAS,CAAEiH,wBAAyBpI,EAAMkI,WAAW,IACtDrM,EACDwM,IAAMC,IAAIC,wHAAkHJ,GACxHK,MAAK,SAAAC,GAEH,IAAM7D,EAAS6D,EAAI5I,KAAK0J,cAAcb,OAEtC,GAAI9D,GAAUA,EAAO7C,OAAS,EAAG,CAE9B,IAAMsH,EAAUzE,EAAO,GAAG4E,SAAW5E,EAAO,GAAG4E,SAAW,OAAS5E,EAAO,GAAG6E,iBACvE7E,EAAO,GAAG8E,UAAY9E,EAAO,GAAG8E,UAAY,OAAS9E,EAAO,GAAG6E,iBAAmB,KAEpFJ,GACD,EAAKlI,SAAS,CAAE,aAAgB,KAAM,QAAWkI,EAASxF,MAAO,OACjE,EAAKgE,aAAajD,EAAO,KAEzB,EAAKzD,SAAS,CAAE,aAAgB,wBAAyB0C,MAAO,YAGnE,EAAK1C,SAAS,CAAE,aAAgB,wBAAyB0C,MAAO,UAGrEsF,OAAM,SAAAC,GAEJ,IAAIC,EACAD,EAAIE,UAAYF,EAAIE,SAASzJ,MAO3BwJ,EAD8B,kBAAtBD,EAAIE,SAASzJ,KACXuJ,EAAIE,SAASzJ,KAAKuE,SAAS,qBAAuB,yDAA2D,QAAUgF,EAAIE,SAAS1J,OAAS,KAAOwJ,EAAIE,SAASzJ,KAEjKuJ,EAAIE,SAASzJ,KAAKyG,KAAO,KAAO8C,EAAIE,SAASzJ,KAAKwJ,QAE/D,EAAKlI,SAAS,CAAE,aAAgBkI,EAASxF,MAAO,SAEhDwF,EAAUD,EAAI9C,KAAO,KAAO8C,EAAIH,KAAO,MAAQG,EAAIC,QACnD,EAAKlI,SAAS,CAAE,aAAgBkI,EAASxF,MAAO,gBAGrD,GAAI,EAAKnD,MAAMqH,cAAgB,EAAKrH,MAAMqH,aAAahG,OAAS,EAAG,CAEvE,IAAM4H,EAAU,EAAKjJ,MAAMqH,aAAa7M,KAAI,SAAA0O,GAAC,OAAIA,EAAE/N,UAAQgO,OAC3DxB,IAAMC,IAAIC,wHAAkHoB,GACxHnB,MAAK,SAAAC,GAEH,IAAM7D,EAAS6D,EAAI5I,KAAK0J,cAAcb,OAEtC,GAAI9D,GAAUA,EAAO7C,OAAS,EAAG,CAE9B,IAAMsH,EAAU,OAASzE,EAAO7C,OAAS,mBAErCsH,EACD,EAAKlI,SAAS,CAAE4G,aAAcnD,EAAQmE,aAAc,KAAMM,QAASA,EAASxF,MAAO,OAEnF,EAAK1C,SAAS,CAAE,aAAgB,wBAAyB0C,MAAO,YAGnE,EAAK1C,SAAS,CAAE,aAAgB,wBAAyB0C,MAAO,UAGrEsF,OAAM,SAAAC,GAEJ,IAAIC,EACAD,EAAIE,UAAYF,EAAIE,SAASzJ,MAO3BwJ,EAD8B,kBAAtBD,EAAIE,SAASzJ,KACXuJ,EAAIE,SAASzJ,KAAKuE,SAAS,qBAAuB,yDAA2D,QAAUgF,EAAIE,SAAS1J,OAAS,KAAOwJ,EAAIE,SAASzJ,KAEjKuJ,EAAIE,SAASzJ,KAAKyG,KAAO,KAAO8C,EAAIE,SAASzJ,KAAKwJ,QAE/D,EAAKlI,SAAS,CAAE,aAAgBkI,EAASxF,MAAO,SAEhDwF,EAAUD,EAAI9C,KAAO,KAAO8C,EAAIH,KAAO,MAAQG,EAAIC,QACnD,EAAKlI,SAAS,CAAE,aAAgBkI,EAASxF,MAAO,aAxM/C,EA+MnBiG,8BAAgC,WAC7B,EAAK3I,UAAS,SAAAT,GAAK,MAAK,CACrB0H,yBAA0B1H,EAAM0H,6BAjNnB,EAqNnB2B,iBAAmB,WAChB,EAAK5I,SAAS,CAAE+G,WAAW,EAAOrE,MAAO,QApNzC,EAAKnD,MAAQ,CACV,aAAgB,KAChB,QAAW,KACX0H,yBAAyB,EACzBF,WAAW,EACXrE,MAAO,KACPkE,aAAc,IARD,E,0CAyNnB,WAAU,IAAD,OAEN,OACG,kBAAC/F,EAAA,EAAD,KACG,kBAACgI,EAAA,EAAD,CAAQC,GAAG,OAAOxL,QAAQ,OAAOyL,OAAO,MAAMC,OAAO,MAClD,kBAACH,EAAA,EAAOI,MAAR,KACG,0BAAM7P,KAAK,MAAMC,aAAW,SAA5B,gBADH,IACwD,uBAAG6P,KAAK,qBAAqBnH,MAAM,oBAAnC,cADxD,IAC6H,kBAACoH,EAAA,EAAD,CAAO7L,QAAQ,SAAf,IAAyB8J,UAEtJ,kBAACyB,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBlM,GAAG,wBAAwB1E,UAAU,uBACnD,kBAAC6Q,EAAA,EAAD,KACG,kBAACA,EAAA,EAAIC,KAAL,CAAUN,KAAK,6BAA6BnH,MAAM,2CAAlD,YACA,kBAACwH,EAAA,EAAIC,KAAL,CAAUN,KAAK,8BAA8BnH,MAAM,mDAAnD,gBAIT,kBAAC0H,EAAD,MACCpJ,KAAKd,MAAM0H,wBAA0B,kBAAC,EAAD,CAAqB9N,aAAckH,KAAKmG,cAAelH,kBAAmBe,KAAKgG,gBAChH,kBAAC,EAAD,CAA4BnN,QAASmH,KAAKsI,gCAC9CtI,KAAKd,MAAM2I,SAAW,kBAAC,EAAD,CAAgBtJ,IAAKyB,KAAKd,MAAM2I,UACtD7H,KAAKd,MAAMqI,cAAgB,kBAACvF,EAAA,EAAD,CAAO/E,QAAQ,WAAW+C,KAAKd,MAAMqI,cAChEvH,KAAKd,MAAMqH,aAAahG,OAAS,GAAK,kBAAC,EAAD,CAAclC,KAAM2B,KAAKd,MAAMqH,aAAczN,aAAckH,KAAKmG,gBACtGnG,KAAKd,MAAMmD,OACT,kBAACgH,EAAA,EAAD,CAAO7K,KAAMwB,KAAKd,MAAMwH,UAAW4C,OAAQtJ,KAAKuI,kBAC7C,kBAACc,EAAA,EAAMvK,KAAP,KACG,uBAAGzG,UAAU,eAAe2H,KAAKd,MAAMmD,MAAMhI,OAAOK,cAApD,OAAuEsF,KAAKd,MAAMmD,MAAMxH,SAASH,cAAjG,aAAyH,6BACtH,+BAAQ,IAAIuB,KAA6B,IAAxB+D,KAAKd,MAAMmD,MAAMI,EAAE,IAAWvG,mBAAmB,SAAlE,IAA6E,IAAID,KAA6B,IAAxB+D,KAAKd,MAAMmD,MAAMI,EAAE,IAAWnG,mBAAmB,QAAS,CAAEC,QAAQ,EAAO0G,KAAM,UAAWC,OAAQ,YAA1L,MAA2M,IAAIjH,KAAiC,IAA5B+D,KAAKd,MAAMmD,MAAMI,EAAEI,IAAI,IAAW3G,mBAAmB,SAAzQ,IAAoR,IAAID,KAAiC,IAA5B+D,KAAKd,MAAMmD,MAAMI,EAAEI,IAAI,IAAWvG,mBAAmB,QAAS,CAAEC,QAAQ,EAAO0G,KAAM,UAAWC,OAAQ,cAExY,kBAACqG,EAAA,EAAD,CAAMxM,GAAG,YAAYyM,UAAWxJ,KAAKd,MAAMmD,MAAME,MAAOkH,SAAU,SAAChN,GAAD,OAAS,EAAKyJ,gBAAgBzJ,KAC7F,kBAACiN,EAAA,EAAD,CAAKC,SAAS,KAAKjI,MAAM,MACtB,kBAAC,EAAD,CAAYW,MAAOrC,KAAKd,MAAMmD,SAEjC,kBAACqH,EAAA,EAAD,CAAKC,SAAS,KAAKjI,MAAM,MACtB,kBAAC,EAAD,CAAYW,MAAOrC,KAAKd,MAAMmD,SAEjC,kBAACqH,EAAA,EAAD,CAAKC,SAAS,MAAMjI,MAAM,MACvB,kBAAC,EAAD,CAAYW,MAAOrC,KAAKd,MAAMmD,iB,GA9PvCT,aCvBlBgI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a5fa61c1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './QuoteDisplay.css';\r\nimport { Button, ProgressBar, OverlayTrigger, Tooltip} from 'react-bootstrap';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nfunction QuoteDisplay (props) {\r\n\r\n   const [dateShow, setDateShow] = useState(false);\r\n   const [rangeShow, setRangeShow] = useState(false);\r\n   const [diffShow, setDiffShow] = useState(false);\r\n   \r\n   return (\r\n      <Table striped bordered hover responsive=\"sm\" size=\"sm\">\r\n         <DisplayHeader\r\n            showDate={dateShow}\r\n            showRange={rangeShow}\r\n            showDiff={diffShow}\r\n            handleToggleShowDate={(status) => setDateShow(!status)}\r\n            handleToggleShowRange={(status) => setRangeShow(!status)}\r\n            handleToggleShowDiff={(status) => setDiffShow(!status)}\r\n            handleSubmit={props.handleSubmit}\r\n         />\r\n         <DisplayBody\r\n            rows={props.data}\r\n            showDate={dateShow}\r\n            showRange={rangeShow}\r\n            showDiff={diffShow}\r\n            handleSubmit={props.handleSubmit}\r\n         />\r\n      </Table>\r\n   );\r\n}\r\n\r\nfunction DisplayHeader(props) {\r\n   \r\n   return (\r\n      <thead>\r\n         <tr className=\"text-right\">\r\n            <th className=\"text-left\" style={{ width: '25%' }}>\r\n               <Button style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => props.handleSubmit(null, null, false)}><span role=\"img\" aria-label=\"Refresh\">&#x1F504;</span></Button>\r\n            </th>\r\n            <th style={{ width: '25%' }}>\r\n               {props.showDate ? <Button style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => props.handleToggleShowDate(props.showDate)}><span role=\"img\" aria-label=\"Date\">&#x1F4C6;</span></Button> : <Button style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => props.handleToggleShowDate(props.showDate)}><span role=\"img\" aria-label=\"Time\">&#x23F2;</span></Button>}\r\n            </th>\r\n            <th style={{ width: '25%' }}>\r\n               {props.showRange ? <Button style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => props.handleToggleShowRange(props.showRange)}><span role=\"img\" aria-label=\"Range\">&#x1F4CA;</span></Button> : <Button style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => props.handleToggleShowRange(props.showRange)}><span role=\"img\" aria-label=\"Price\">&#x1F4B0;</span></Button>}\r\n            </th>\r\n            <th style={{ width: '25%' }}>{props.showDiff ? <Button className=\"shadow-none\" style={{ border: 'none', background: 'none', color: 'black', padding: 0 }} onClick={() => props.handleToggleShowDiff(props.showDiff)}><span>&#x00B1;</span></Button> : <Button className=\"shadow-none\" style={{ border: 'none', background: 'none', color: 'black', padding: 0 }} onClick={() => props.handleToggleShowDiff(props.showDiff)}><span>%</span></Button>}</th>\r\n         </tr>\r\n      </thead>\r\n   )\r\n}\r\n\r\nfunction DisplayBody (props) {\r\n\r\n   const refreshQuote = (exchange, symbol) => {\r\n      props.handleSubmit(symbol.toLowerCase(), exchange.toLowerCase(), false, false);\r\n   }\r\n\r\n   const refreshChart = (exchange, symbol) => {\r\n      props.handleSubmit(symbol.toLowerCase(), exchange.toLowerCase(), false, true);\r\n   }\r\n\r\n\r\n   const rows = props.rows.map((row, index) => {\r\n      // independent of market state\r\n      const dateOptions = { month: 'numeric', day: 'numeric' };\r\n      const timeOptions = { hour12: false };\r\n      const dayLow = row.regularMarketDayLow.fmt;\r\n      const dayHigh = row.regularMarketDayHigh.fmt;\r\n      const regularPrice = row.regularMarketPrice.fmt;\r\n      const colonIndex = row.symbol.indexOf('.');\r\n      const symbolString = colonIndex > -1 ? row.symbol.slice(0, colonIndex) : row.symbol;\r\n      const currency = row.currency.toUpperCase() === 'CAD' ? \"C$\" : \"$\";\r\n      const symColor = colonIndex > -1 ?\r\n         (row.symbol.slice(colonIndex + 1).toLowerCase() === 'to' ? \"primary\" :\r\n            (row.symbol.slice(colonIndex + 1).toLowerCase() === 'cn' ? \"danger\" :\r\n               (row.symbol.slice(colonIndex + 1).toLowerCase() === 'v' ? \"dark\" :\r\n                  \"warning\"\r\n               )\r\n            )\r\n         ) : \"success\";\r\n      const exchange = colonIndex > -1 ?\r\n         (row.symbol.slice(colonIndex + 1).toLowerCase() === 'to' ? \"tsx\" :\r\n            (row.symbol.slice(colonIndex + 1).toLowerCase() === 'cn' ? \"cse\" :\r\n               (row.symbol.slice(colonIndex + 1).toLowerCase() === 'v' ? \"tsxv\" :\r\n                  \"neo\"\r\n               )\r\n            )\r\n         ) : \"us\";\r\n\r\n      // market state dependent\r\n      let marketTime = row.regularMarketTime.raw;\r\n      let changePercent = row.regularMarketChangePercent.fmt;\r\n      let formattedChange = row.regularMarketChange.fmt;\r\n      let change = row.regularMarketChange.raw;\r\n      let price = row.regularMarketPrice.fmt;\r\n      if ((row.marketState === 'POST' || row.marketState === 'POSTPOST' || row.marketState === 'PREPRE') && row.postMarketTime) {\r\n         marketTime = row.postMarketTime.raw;\r\n         changePercent = row.postMarketChangePercent.fmt;\r\n         formattedChange = row.postMarketChange.fmt;\r\n         change = row.postMarketChange.raw;\r\n         price = row.postMarketPrice.fmt;\r\n      } else if (row.marketState === \"PRE\" && row.preMarketTime) {\r\n         marketTime = row.preMarketTime.raw;\r\n         changePercent = row.preMarketChangePercent.fmt;\r\n         formattedChange = row.preMarketChange.fmt;\r\n         change = row.preMarketChange.raw;\r\n         price = row.preMarketPrice.fmt;\r\n      }\r\n\r\n      const dateStr = new Date(marketTime * 1000).toLocaleDateString('en-CA', dateOptions);\r\n      const timeStr = new Date(marketTime * 1000).toLocaleTimeString('en-CA', timeOptions);\r\n      const textColor = change > 0 ? \"text-success\" : (change < 0 ? \"text-danger\" : \"text-dark\");\r\n\r\n      return (\r\n\r\n         <tr key={exchange + \"-\" + symbolString} className=\"text-right\">\r\n            <td className=\"text-left\">\r\n               <Button className={\"text-\" + symColor + \" font-weight-bold\"} style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => refreshChart(exchange, symbolString)} ><span role=\"img\" aria-label=\"Chart\">&#x1F4C8;</span></Button>\r\n               {' '}<Button className={\"text-\" + symColor + \" font-weight-bold\"} style={{ boxShadow: 'none', border: 'none', background: 'none', padding: 0 }} onClick={() => refreshQuote(exchange, symbolString)} >{symbolString}</Button></td>\r\n            <td>\r\n               {props.showDate ? <span>{dateStr}</span> : <span>{timeStr}</span>}\r\n            </td>\r\n            <td>\r\n               {props.showRange\r\n                  ? <OverlayTrigger overlay={<Tooltip id={exchange + \"-\" + symbolString}>{dayLow +\"-\"+dayHigh}</Tooltip>}>\r\n                     <ProgressBar key={1} variant={symColor} min={dayLow} now={regularPrice} max={dayHigh} label={regularPrice}/>\r\n                  </OverlayTrigger>\r\n                  : <span>{currency}{price}</span>}\r\n            </td>\r\n            <td className={textColor}>\r\n               {props.showDiff ? <span>{formattedChange}</span> : <span>{changePercent}</span>}\r\n            </td>\r\n         </tr>\r\n      )\r\n   });\r\n\r\n   return <tbody>{rows}</tbody>;\r\n}\r\n\r\nexport default QuoteDisplay;\r\n","import React, { useState } from 'react';\r\nimport Toast from 'react-bootstrap/Toast';\r\n\r\nconst MessageDisplay = props => {\r\n    const msg = props.msg;\r\n    const [show, setShow] = useState(true);\r\n \r\n    \r\n    return (\r\n       <Toast delay={3000} autohide show={show} onClose={() => setShow(false)}><Toast.Body>{msg}</Toast.Body></Toast>\r\n    )\r\n    \r\n };\r\n\r\n export default MessageDisplay;","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nclass SymbolExchangeInput extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = { exchange: 'TSX', symbol: '', date: new Date() }\r\n   }\r\n\r\n   getQuote = () => {\r\n      this.props.handleInputChange(null, \"Quote for \" + this.state.symbol.toUpperCase() + ' on ' + this.state.exchange.toUpperCase() + \" exchange requested ...\");\r\n      this.props.handleSubmit(this.state.symbol.toLowerCase(), this.state.exchange.toLowerCase(), true);\r\n   }\r\n\r\n   handleSymbolUpdate = (event) => {\r\n      const regex = new RegExp('^[a-zA-Z0-9]{1,32}$');;\r\n      const symbol = event.target.value.trim()\r\n      if (regex.test(symbol)) {\r\n         this.setState({ \"symbol\": symbol });\r\n         this.props.handleInputChange(null, null);\r\n      } else {\r\n         this.setState({ \"symbol\": '' });\r\n         this.props.handleInputChange(\"Invalid symbol.\", null);\r\n      }\r\n   }\r\n\r\n   handleExchangeUpdate = e => {\r\n      this.setState({ \"exchange\": e.target.value.trim() });\r\n      this.props.handleInputChange(null, null);\r\n   }\r\n\r\n   handleSymbolInputKeyDown = (e) => {\r\n      if (e.key === \"Enter\") {\r\n         this.getQuote();\r\n      }\r\n   }\r\n\r\n   componentDidMount() {\r\n      this.timerID = setInterval(\r\n         () => this.tick(),\r\n         1000\r\n      );\r\n   }\r\n\r\n   tick() {\r\n      this.setState({\r\n         date: new Date()\r\n      });\r\n   }\r\n\r\n   componentWillUnmount() {\r\n      clearInterval(this.timerID);\r\n   }\r\n\r\n   render() {\r\n\r\n      let disableGet = true;\r\n      if (this.state.symbol !== undefined && this.state.symbol !== null && this.state.symbol.length > 0) {\r\n         disableGet = false;\r\n      }\r\n\r\n      const timeOptions = { hour12: false };\r\n      const timeStr = this.state.date.toLocaleTimeString('en-CA', timeOptions);\r\n\r\n      return (\r\n         <Container className='mt-3 md-3'>\r\n            <Form autoComplete=\"on\" onSubmit={e => e.preventDefault()} >\r\n               <Form.Group as={Row}>\r\n                  <Col xs=\"4\">\r\n                     <Form.Control as=\"select\" onChange={this.handleExchangeUpdate} placeholder=\"Exchange\" defaultValue=\"TSX\" size=\"sm\">\r\n                        <option value=\"US\" className='text-success font-weight-bold'>US</option>\r\n                        <option value=\"TSX\" className='text-primary font-weight-bold'>TSX</option>\r\n                        <option value=\"TSXV\" className='text-dark font-weight-bold'>TSXV</option>\r\n                        <option value=\"CSE\" className='text-danger font-weight-bold'>CSE</option>\r\n                        <option value=\"NEO\" className='text-warning font-weight-bold'>NEO</option>\r\n                     </Form.Control>\r\n                  </Col>\r\n                  <Col xs=\"6\">\r\n                     <Form.Control type=\"text\" autoCorrect=\"off\" autoCapitalize=\"off\" placeholder={\"symbol-\" + timeStr} size=\"sm\" value={this.state.symbol}\r\n                        onChange={this.handleSymbolUpdate}\r\n                        onKeyDown={this.handleSymbolInputKeyDown} />\r\n                  </Col>\r\n                  {disableGet ? <Col xs=\"2\"><Button title=\"enter symbol to enable clicking\" className=\"shadow-none\" style={{ border: 'none', background: 'none' }} onClick={this.getQuote} disabled><span role=\"img\" aria-label=\"eyes\">&#x1f440;</span></Button></Col>\r\n                     : <Col xs=\"2\"><Button title=\"click to get quote\" className=\"shadow-none\" style={{ border: 'none', background: 'none' }} onClick={this.getQuote}><span role=\"img\" aria-label=\"eyes\">&#x1f440;</span></Button></Col>\r\n                  }\r\n               </Form.Group>\r\n            </Form>\r\n         </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default SymbolExchangeInput;\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nclass SymbolExchangeInputEnabler extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = { date: new Date() }\r\n   }\r\n\r\n   handleClick = () => {\r\n      this.props.onClick();\r\n   }\r\n\r\n   componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n   render() {\r\n      \r\n      const timeOptions = { hour12: false };\r\n      const timeStr = this.state.date.toLocaleTimeString('en-CA', timeOptions);\r\n\r\n      return (\r\n        <Container className='mt-3 md-3'>\r\n            <Row>\r\n                <Col className=\"my-auto\">{timeStr}</Col>\r\n                <Col className=\"text-right\"><Button title=\"show symbol and excahnge input\" className=\"shadow-none\" style={{border: 'none', background: 'none'}} onClick={this.handleClick} ><span role=\"img\" aria-label=\"eye\">&#x1f441;</span></Button></Col>\r\n            </Row>               \r\n        </Container>\r\n      )\r\n   }\r\n}\r\n\r\nexport default SymbolExchangeInputEnabler;\r\n","import React, { useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst Notes = () => {\r\n    const [show, setShow] = useState(true);\r\n \r\n    if (show) {\r\n       return (\r\n          <Alert variant=\"primary\" dismissible onClose={() => setShow(false)}>\r\n             <Alert.Heading>FREE Real-Time Quotes for North American Stocks</Alert.Heading>\r\n             <p>Enjoy exploring all available features <span role=\"img\" aria-label=\"Seedling\">🌱</span> <span role=\"img\" aria-label=\"Chart\">📈</span></p>            \r\n          </Alert>         \r\n       )\r\n    }\r\n    return <></>;\r\n };\r\n\r\n export default Notes;","import React, { Component } from 'react';\r\nimport {\r\n    AreaChart,\r\n    Area,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Label\r\n} from \"recharts\";\r\n\r\nclass StockChart extends Component {\r\n\r\n\r\n    getTicks = (chart) => {\r\n        let chartArray = [];\r\n        if (chart.range === '1d') {\r\n            chartArray.push(chart.x[0] + 1800);\r\n            chartArray.push(chart.x[0] + 1800 + 3600 * 2);\r\n            chartArray.push(chart.x[0] + 1800 + 3600 * 4);\r\n            chartArray.push(chart.x[0] + 1800 + 3600 * 6);\r\n        } else if (chart.range === '5d') {\r\n            chartArray.push(chart.x[0]);\r\n            let days = 1;\r\n            let currentDateTimestamp = chart.x[0];\r\n            while (days < 5) {            \r\n                currentDateTimestamp = currentDateTimestamp + 3600 * 24;    \r\n                if (chart.x.includes( currentDateTimestamp )) {\r\n                    chartArray.push(currentDateTimestamp);\r\n                    days ++;                    \r\n                }\r\n                if (currentDateTimestamp > chart.x.at(-1)) break;\r\n            }\r\n        } else {\r\n            chartArray.push(chart.x[0]);\r\n            let ticks = 1;\r\n            let currentDateTimestamp = chart.x[0];\r\n            while (ticks < 4) {            \r\n                currentDateTimestamp = currentDateTimestamp + 3600 * 24 *10;    \r\n                if (chart.x.includes( currentDateTimestamp )) {\r\n                    chartArray.push(currentDateTimestamp);\r\n                    ticks ++;                    \r\n                }\r\n                if (currentDateTimestamp > chart.x.at(-1)) break;\r\n            }        \r\n        }\r\n        return chartArray;\r\n    }\r\n\r\n    getTooltip = (x, y) => {\r\n        if (this.props.chart.range === '1d') {\r\n            return new Date(x*1000).toLocaleTimeString(\"en-CA\", { hour12: false, hour: \"2-digit\", minute: \"2-digit\" }) + \" - \" + y;\r\n        } else if (this.props.chart.range === '5d') {\r\n            return new Date(x*1000).toLocaleDateString('en-CA', {weekday: 'short', month: 'short', day: 'numeric'}) + \", \" + new Date(x*1000).toLocaleTimeString(\"en-CA\", { hour12: false, hour: \"2-digit\", minute: \"2-digit\" }) + \" - \" + y;\r\n        } else {\r\n            return new Date(x*1000).toLocaleDateString('en-CA', {month: 'short', day: 'numeric'}) + \", \" + new Date(x*1000).toLocaleTimeString(\"en-CA\", { hour12: false, hour: \"2-digit\", minute: \"2-digit\" }) + \" - \" + y;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // prepare data in chart\r\n        const quotes = this.props.chart.y.filter(value => value !== null)\r\n            .map((value, index) => ({\r\n                time: this.props.chart.x[index],\r\n                quote: Math.round(value * 100) / 100\r\n            }));\r\n\r\n        const chartPreviousClose = this.props.chart.chartPreviousClose;\r\n        \r\n        const tickArray = this.getTicks(this.props.chart);\r\n\r\n        const showTick = timestamp => {\r\n            if (this.props.chart.range === '1d') {\r\n                return new Date(timestamp*1000).toLocaleTimeString(\"en-CA\", { hour12: false, hour: \"2-digit\", minute: \"2-digit\" });\r\n            } else if (this.props.chart.range === '5d') {\r\n                return new Date(timestamp*1000).toLocaleDateString('en-CA', {weekday: 'short'});\r\n            } else {\r\n                return new Date(timestamp*1000).toLocaleDateString('en-CA', {month: 'short', day: 'numeric'});\r\n            }\r\n        }\r\n\r\n        return (\r\n            <ResponsiveContainer width={'100%'} height={300}>\r\n                <AreaChart width={500} height={400} data={quotes} className=\"my-3\">\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"time\" tickLine={false} tickSize={8} axisLine={false} tick={{ fontSize: '0.8rem' }} ticks={tickArray} interval=\"preserveStartEnd\"\r\n                        tickFormatter= {showTick} type='category' />\r\n                    <YAxis type=\"number\" domain={[\"auto\", \"auto\"]} orientation='right' tickLine={false} tickSize={0} axisLine={false} tick={{ fontSize: '0.8rem' }} />\r\n                    <Tooltip formatter={(value, name, props) => [value, \"\"]} separator={''} contentStyle={{ fontSize: '0.8rem' }} content={({ active, payload, label }) => {\r\n                        if (active && payload && payload.length) {\r\n                            return (\r\n                                <div className=\"custom-tooltip\" style={{ backgroundColor: '#ddd', fontSize: '0.8rem', padding: '0 0.5rem' }}>\r\n                                    {/*<p className=\"label\">{`${label} - ${payload[0].value}`}</p>*/}\r\n                                    <p className=\"label\">{this.getTooltip(label, payload[0].value)}</p>\r\n                                </div>\r\n                            );\r\n                        } else { return <></> }\r\n                    }} />\r\n                    <ReferenceLine\r\n                        y={chartPreviousClose}\r\n                        stroke=\"black\"\r\n                        strokeDasharray=\"3 3\"\r\n                        alwaysShow={true}\r\n                    >\r\n                        <Label value={chartPreviousClose} position={\"bottom\"} fontSize={'0.8rem'} fontWeight={'bold'} />\r\n                    </ReferenceLine>\r\n\r\n                    <Area type=\"monotone\" dataKey=\"quote\" stroke=\"#8884d8\" fill={Math.round(this.props.chart.y.at(-1) * 100) / 100 > chartPreviousClose ? \"green\" : \"red\"} />\r\n                </AreaChart>\r\n            </ResponsiveContainer>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default StockChart;","import React, { Component } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\n\r\nimport axios from 'axios';\r\n\r\n// Custom components for this application\r\nimport QuoteDisplay from '../QuoteDisplay/QuoteDisplay';\r\nimport MessageDisplay from '../MessageDisplay/MessageDisplay';\r\nimport SymbolExchangeInput from '../SymbolExchangeInput/SymbolExchangeInput';\r\nimport SymbolExchangeInputEnabler from '../SymbolExchangeInputEnabler/SymbolExchangeInputEnabler';\r\nimport Note from '../Note/Note';\r\nimport StockChart from \"../StockChart/StockChart\";\r\nimport \"./App.css\";\r\n\r\nrequire('dotenv').config();\r\n\r\n/**\r\n * App should render the main content/component/container for an application\r\n */\r\nclass App extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         \"errorMessage\": null,\r\n         'message': null,\r\n         showSymbolExchangeInput: true,\r\n         showChart: false,\r\n         chart: null,\r\n         latestQuotes: []\r\n      }\r\n   }\r\n\r\n   updateMessage = (errMsg, msg) => {\r\n      this.setState({ \"errorMessage\": errMsg, 'message': msg });\r\n   }\r\n\r\n\r\n   handleTabUpdate = (key) => {\r\n      this.getQuoteChart(this.state.chart.symbol, this.state.chart.exchange, false, true, key);\r\n      this.setState( oldState => ({ chart: { ...oldState.chart, range: key}}));\r\n   }\r\n\r\n   updateQuotes = (quote) => {\r\n      let updatedQuotes = [...this.state.latestQuotes];\r\n      const quoteNums = this.state.latestQuotes.length;\r\n      let foundMatching = false;\r\n      for (let index = 0; index < quoteNums; index++) {\r\n         let row = updatedQuotes[index];\r\n         if (row.symbol === quote.symbol) {\r\n            foundMatching = true;\r\n            row.marketState = quote.marketState;\r\n            row.regularMarketDayHigh = { ...quote.regularMarketDayHigh };\r\n            row.regularMarketDayLow = { ...quote.regularMarketDayLow };\r\n            row.regularMarketChangePercent = { ...quote.regularMarketChangePercent };\r\n            row.regularMarketChange = { ...quote.regularMarketChange };\r\n            row.regularMarketPrice = { ...quote.regularMarketPrice };\r\n            row.regularMarketTime = { ...quote.regularMarketTime };\r\n            if ((quote.marketState === \"POST\" || quote.marketState === \"POSTPOST\" || quote.marketState === \"PREPRE\") && quote.postMarketTime) {\r\n               row.postMarketPrice = { ...quote.postMarketPrice };\r\n               row.postMarketTime = { ...quote.postMarketTime };\r\n               row.postMarketChangePercent = { ...quote.postMarketChangePercent };\r\n               row.postMarketChange = { ...quote.postMarketChange }\r\n            } else if (quote.marketState === \"PRE\" && quote.preMarketTime) {\r\n               row.preMarketPrice = { ...quote.preMarketPrice };\r\n               row.preMarketTime = { ...quote.preMarketTime };\r\n               row.preMarketChangePercent = { ...quote.preMarketChangePercent };\r\n               row.preMarketChange = { ...quote.preMarketChange }\r\n            }\r\n            break;\r\n         }\r\n      }\r\n\r\n      if (!foundMatching) {\r\n         updatedQuotes = [quote, ...updatedQuotes];\r\n      }\r\n\r\n      this.setState({ latestQuotes: updatedQuotes });\r\n   }\r\n\r\n   getQuoteChart = (symbol, exchange, show, showChart = false, range = '1d') => {\r\n\r\n\r\n      //console.log(\"index.js - symbol: \" + symbol);\r\n      //console.log(\"index.js - exchange: \" + exchange);\r\n      const yahooSymbol = exchange === \"tsx\" ? symbol + \".to\"\r\n         : (exchange === \"cse\" ? symbol + \".cn\"\r\n            : (exchange === \"tsxv\" ? symbol + \".v\"\r\n               : (exchange === \"neo\" ? symbol + \".ne\" : symbol)));\r\n      \r\n      const interval = range === \"1d\" ? \"2m\" : (range === \"5d\" ? \"15m\" : \"30m\");\r\n\r\n      if (showChart) {\r\n         this.setState({\r\n            showSymbolExchangeInput: show, showChart: showChart\r\n         });\r\n\r\n         axios.get(process.env.REACT_APP_CORS_PROXY + '/https://query1.finance.yahoo.com/v8/finance/chart/' + yahooSymbol \r\n                                                   + '?includePrePost=false&interval=' + interval + '&useYfid=true&range=' + range)\r\n            .then(res => {\r\n               //console.log(res);\r\n               const chartArray = res.data.chart.result;\r\n               //console.log(quotes);\r\n               if (chartArray && chartArray.length > 0) {\r\n                  //console.log(\"Got last price ... \");\r\n                  const timeStamps = chartArray[0].timestamp;\r\n                  //console.log(message);\r\n                  if (timeStamps && timeStamps.length > 0) {\r\n                     this.setState({\r\n                        chart: { range: range, exchange: exchange, symbol: symbol, x: timeStamps, y: chartArray[0].indicators.quote[0].close, chartPreviousClose: chartArray[0].meta.chartPreviousClose },\r\n                        errorMessage: null\r\n                     });\r\n                  } else {\r\n                     this.setState({ chart: null, \"errorMessage\": \"Sorry, no data found.\" });\r\n                  }\r\n               } else {\r\n                  if (res.data.chart.error) {\r\n                     const code = res.data.chart.error.code;\r\n                     const description = res.data.chart.error.description;\r\n                     this.setState({ chart: null, \"errorMessage\": code + \": \" + description });\r\n                  } else {\r\n                     this.setState({ chart: null, \"errorMessage\": \"Sorry, no data found.\" });\r\n                  }\r\n               }\r\n            })\r\n            .catch(err => {\r\n               //console.log(err);\r\n               let message;\r\n               if (err.response && err.response.data) {\r\n                  if (typeof err.response.data === 'string') {\r\n                     message = err.response.data.includes('Cannot GET /quote') ? 'The API backend is not available. Please have a check.' : 'HTTP ' + err.response.status + ': ' + err.response.data;\r\n                  } else {\r\n                     message = err.response.data.name + \": \" + err.response.data.message;\r\n                  }\r\n                  this.setState({ chart: null, \"errorMessage\": message });\r\n               } else {\r\n                  message = err.name + ' (' + err.code + '): ' + err.message;\r\n                  this.setState({ chart: null, \"errorMessage\": message });\r\n               }\r\n            });\r\n      } else {\r\n         this.setState({ showSymbolExchangeInput: show, showChart: false });\r\n         if (symbol) {\r\n            axios.get(process.env.REACT_APP_CORS_PROXY + '/https://query1.finance.yahoo.com/v7/finance/quote?formatted=true&symbols=' + yahooSymbol)\r\n               .then(res => {\r\n                  //console.log(res);\r\n                  const quotes = res.data.quoteResponse.result;\r\n                  //console.log(quotes);\r\n                  if (quotes && quotes.length > 0) {\r\n                     //console.log(\"Got last price ... \");\r\n                     const message = quotes[0].longName ? quotes[0].longName + ' on ' + quotes[0].fullExchangeName\r\n                        : (quotes[0].shortName ? quotes[0].shortName + ' on ' + quotes[0].fullExchangeName : null);\r\n                     //console.log(message);\r\n                     if (message) {\r\n                        this.setState({ \"errorMessage\": null, 'message': message, chart: null });\r\n                        this.updateQuotes(quotes[0]);\r\n                     } else {\r\n                        this.setState({ \"errorMessage\": \"Sorry, no data found.\", chart: null });\r\n                     }\r\n                  } else {\r\n                     this.setState({ \"errorMessage\": \"Sorry, no data found.\", chart: null });\r\n                  }\r\n               })\r\n               .catch(err => {\r\n                  //console.log(err);\r\n                  let message;\r\n                  if (err.response && err.response.data) {\r\n                     // The request was made and the server responded with a status code\r\n                     // that falls out of the range of 2xx\r\n                     //console.log(err.response.data);\r\n                     //console.log(err.response.status);\r\n                     //console.log(err.response.headers);\r\n                     if (typeof err.response.data === 'string') {\r\n                        message = err.response.data.includes('Cannot GET /quote') ? 'The API backend is not available. Please have a check.' : 'HTTP ' + err.response.status + ': ' + err.response.data;\r\n                     } else {\r\n                        message = err.response.data.name + \": \" + err.response.data.message;\r\n                     }\r\n                     this.setState({ \"errorMessage\": message, chart: null });\r\n                  } else {\r\n                     message = err.name + ' (' + err.code + '): ' + err.message;\r\n                     this.setState({ \"errorMessage\": message, chart: null });\r\n                  }\r\n               });\r\n         } else if (this.state.latestQuotes && this.state.latestQuotes.length > 0) {\r\n            // refresh to get quotes of all current symbols\r\n            const symbols = this.state.latestQuotes.map(o => o.symbol).join();\r\n            axios.get(process.env.REACT_APP_CORS_PROXY + '/https://query1.finance.yahoo.com/v7/finance/quote?formatted=true&symbols=' + symbols)\r\n               .then(res => {\r\n                  //console.log(res);\r\n                  const quotes = res.data.quoteResponse.result;\r\n                  //console.log(quotes);\r\n                  if (quotes && quotes.length > 0) {\r\n                     //console.log(\"Got last price ... \");\r\n                     const message = 'All ' + quotes.length + ' quotes updated.';\r\n                     //console.log(message);\r\n                     if (message) {\r\n                        this.setState({ latestQuotes: quotes, errorMessage: null, message: message, chart: null });\r\n                     } else {\r\n                        this.setState({ \"errorMessage\": \"Sorry, no data found.\", chart: null });\r\n                     }\r\n                  } else {\r\n                     this.setState({ \"errorMessage\": \"Sorry, no data found.\", chart: null });\r\n                  }\r\n               })\r\n               .catch(err => {\r\n                  //console.log(err);\r\n                  let message;\r\n                  if (err.response && err.response.data) {\r\n                     // The request was made and the server responded with a status code\r\n                     // that falls out of the range of 2xx\r\n                     //console.log(err.response.data);\r\n                     //console.log(err.response.status);\r\n                     //console.log(err.response.headers);\r\n                     if (typeof err.response.data === 'string') {\r\n                        message = err.response.data.includes('Cannot GET /quote') ? 'The API backend is not available. Please have a check.' : 'HTTP ' + err.response.status + ': ' + err.response.data;\r\n                     } else {\r\n                        message = err.response.data.name + \": \" + err.response.data.message;\r\n                     }\r\n                     this.setState({ \"errorMessage\": message, chart: null });\r\n                  } else {\r\n                     message = err.name + ' (' + err.code + '): ' + err.message;\r\n                     this.setState({ \"errorMessage\": message, chart: null });\r\n                  }\r\n               });\r\n         }\r\n      }\r\n   }\r\n\r\n   toggleSymbolExchangeInputShow = () => {\r\n      this.setState(state => ({\r\n         showSymbolExchangeInput: !state.showSymbolExchangeInput\r\n      }));\r\n   }\r\n\r\n   handleCloseChart = () => {\r\n      this.setState({ showChart: false, chart: null });\r\n   }\r\n\r\n   render() {\r\n\r\n      return (\r\n         <Container>\r\n            <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\" expand=\"sm\">\r\n               <Navbar.Brand>\r\n                  <span role=\"img\" aria-label=\"Stock\">&#x1F4C8;</span> <a href=\"https://enjoyit.ca\" title=\"go to enjoyit.ca\">enjoyit.ca</a> <Badge variant=\"light\">v{process.env.REACT_APP_VERSION}</Badge>\r\n               </Navbar.Brand>\r\n               <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n               <Navbar.Collapse id=\"responsive-navbar-nav\" className=\"justify-content-end\">\r\n                  <Nav>\r\n                     <Nav.Link href=\"mailto:feedback@enjoyit.ca\" title=\"provide feedback to feedback@enjoyit.ca\">Feedback</Nav.Link>\r\n                     <Nav.Link href=\"mailto:donations@enjoyit.ca\" title=\"eTransfer less than $10 to donations@enjoyit.ca\">Donations</Nav.Link>\r\n                  </Nav>\r\n               </Navbar.Collapse>\r\n            </Navbar>\r\n            <Note />\r\n            {this.state.showSymbolExchangeInput ? <SymbolExchangeInput handleSubmit={this.getQuoteChart} handleInputChange={this.updateMessage} />\r\n               : <SymbolExchangeInputEnabler onClick={this.toggleSymbolExchangeInputShow} />}\r\n            {this.state.message && <MessageDisplay msg={this.state.message} />}\r\n            {this.state.errorMessage && <Alert variant='warning'>{this.state.errorMessage}</Alert>}\r\n            {this.state.latestQuotes.length > 0 && <QuoteDisplay data={this.state.latestQuotes} handleSubmit={this.getQuoteChart} />}\r\n            {this.state.chart &&\r\n               <Modal show={this.state.showChart} onHide={this.handleCloseChart}>\r\n                  <Modal.Body>\r\n                     <p className=\"text-center\">{this.state.chart.symbol.toUpperCase()} on {this.state.chart.exchange.toUpperCase()} Exchange <br />\r\n                        <small>{new Date(this.state.chart.x[0] * 1000).toLocaleDateString('en-CA')} {new Date(this.state.chart.x[0] * 1000).toLocaleTimeString('en-CA', { hour12: false, hour: '2-digit', minute: '2-digit' })} - {new Date(this.state.chart.x.at(-1) * 1000).toLocaleDateString('en-CA')} {new Date(this.state.chart.x.at(-1) * 1000).toLocaleTimeString('en-CA', { hour12: false, hour: '2-digit', minute: '2-digit' })}</small>\r\n                     </p>\r\n                     <Tabs id=\"chart-tab\" activeKey={this.state.chart.range} onSelect={(key) => this.handleTabUpdate(key)} >\r\n                        <Tab eventKey=\"1d\" title=\"1D\">\r\n                           <StockChart chart={this.state.chart} />\r\n                        </Tab>\r\n                        <Tab eventKey=\"5d\" title=\"5D\">\r\n                           <StockChart chart={this.state.chart} />\r\n                        </Tab>\r\n                        <Tab eventKey=\"1mo\" title=\"1M\">\r\n                           <StockChart chart={this.state.chart} />\r\n                        </Tab>\r\n                     </Tabs>\r\n                  </Modal.Body>\r\n               </Modal>}\r\n         </Container>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './component/App/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}